package com.tienda.resource;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.container.ResourceContext;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.tienda.bean.ExceptionMessage;
import com.tienda.bean.Orders;
import com.tienda.bean.User;
import com.tienda.bean.Wishlist;
import com.tienda.service.TiendaService;
import com.tienda.util.UserNotFoundException;

@Path("/users")
public class UserResource {
	// resource class
	@Context
private ResourceContext resourcecontext;
	
	@GET
	@Produces(value={MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) //MIME type/Media Type
	@Path("{uname}")
public User fetchUserDetails(/*@QueryParam("uname")*/@PathParam("uname")String username) throws UserNotFoundException {//resource mathod
	User user;
	user=new TiendaService().getUserDetails(username);
	return user;
	
}
	@Path("{uname}/{sub-resource-name}")
	public Object getSubReource(@PathParam("sub-resource-name")String subResourceName) {
		//sub resource locators
		
		if("orders".equals(subResourceName))
		{
			return resourcecontext.getResource(OrderResource.class);
		}else if("wishlist".equals(subResourceName)){
			return resourcecontext.getResource(WishlistResource.class);
		}
		
		throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(new ExceptionMessage("Resource not found")).build());
		
	}
	
	
	

}

